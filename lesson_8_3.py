# 3) Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class NotNumberError(Exception):
    def __init__(self, value):
        self.value = value
        self.message = f"Ошибка: '{value}' не является числом!"
        super().__init__(self.message)


def get_numbers():
    numbers = []
    while True:
        try:
            value = input("Введите число (или 'stop' для завершения ввода): ")
            if value == "stop" or "STOP":
                break
            if not value.isdigit():
                raise NotNumberError(value)
            numbers.append(int(value))
        except NotNumberError as e:
            print(e.message)
    return numbers


try:
    numbers = get_numbers()
    print("Список чисел: ", numbers)
except KeyboardInterrupt:
    print("Программа завершена пользователем")
